<?xml version="1.0" encoding="UTF-8"?>
<items xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.oracle.com/sqldeveloper/3_1/dialogs
                        http://xmlns.oracle.com/sqldeveloper/3_1/dialogs.xsd"
	xmlns="http://xmlns.oracle.com/sqldeveloper/3_1/dialogs">

	<!-- first item based on title is considered independent of minversion/maxversion -->
	<item connType="Oracle" type="CONNECTION" reload="true" minversion="11.1">
		<title>Compile with PL/Scope...</title>
		<prompt type="radio">
			<label>Identifiers</label>
			<value><![CDATA[STATIC:ALL:NONE:PUBLIC:SQL:PLSQL]]></value>
		</prompt>
		<prompt type="radio">
			<label>Statements</label>
			<value><![CDATA[STATIC:ALL:NONE]]></value>
		</prompt>
		<prompt>
			<label>Compile Code?</label>
			<value><![CDATA[STATIC:Yes:No]]>
			</value>
		</prompt>
		<prompt>
			<label>Compile Synonyms?</label>
			<value><![CDATA[STATIC:Yes:No]]>
			</value>
		</prompt>
		<sql>
			<![CDATA[
declare
   e_is_not_udt     exception;
   e_has_table_deps exception;
   e_no_privs       exception;
   pragma exception_init(e_is_not_udt, -22307);
   pragma exception_init(e_has_table_deps, -2311);
   pragma exception_init(e_no_privs, -1031);
begin
   if dbms_db_version.version <= 11 or
      dbms_db_version.version = 12 and dbms_db_version.release = 1
   then
      /* PL/Scope identifiers since 11.1 */
      execute immediate q'[ALTER SESSION SET plscope_settings='IDENTIFIERS:#0#']';
   else
      /* PL/Scope statements since 12.2 */
      execute immediate q'[ALTER SESSION SET plscope_settings='IDENTIFIERS:#0#, STATEMENTS:#1#']';
   end if;
   if not (dbms_db_version.version = 11 and dbms_db_version.version = 1) and '#3#' = 'Yes' then
      /* Compilation of synonyms have been introduced with EBR in 11.2 */
      <<synonyms>>
      for r in (
         select synonym_name
           from all_synonyms
          where owner = sys_context('userenv', 'authenticated_identity')
      )
      loop
         execute immediate 'ALTER SYNONYM "'
            || r.synonym_name
            || '" COMPILE';
      end loop synonyms;
      <<public_synonyms>>
      for r in (
         select synonym_name
           from sys.all_synonyms
          where owner = 'PUBLIC'
            and table_owner = sys_context('userenv', 'authenticated_identity')
      )
      loop
         <<compile_public_synonym>>
         begin
            execute immediate 'ALTER PUBLIC SYNONYM "'
               || r.synonym_name
               || '" COMPILE';
         exception
            when e_no_privs then
               /* ignore when user does not have create public synonym and drop public synonym privileges */
               null;
         end compile_public_synonym;
      end loop public_synonyms;
   end if;
   if '#2#' = 'Yes' then
      /* Compile types */
      <<types>>
      for r in (
         select o.object_type, o.object_name, count(d.name) as priority
           from sys.all_objects o
           left join all_dependencies d
             on d.owner = o.owner
            and d.type = o.object_type
            and d.name = o.object_name
          where o.owner = sys_context('userenv', 'authenticated_identity')
            and o.object_type in ('TYPE', 'TYPE BODY')
          group by o.object_type, o.object_name
          order by priority
      )
      loop
         <<compile_type>>
         begin
            if r.object_type = 'TYPE' then
               execute immediate 'ALTER TYPE "'
                  || r.object_name
                  || '" COMPILE';
            else
               execute immediate 'ALTER TYPE "'
                  || r.object_name
                  || '" COMPILE BODY';
            end if;
         exception
            when e_is_not_udt then
               /* ignore errors for non user-defined types */
               null;
            when e_has_table_deps then
               /* ignore when type is used in tables */
               null;
         end compile_type;
      end loop types;
      /* Compile schema handles procedures, functions, packages, views and triggers only */
      dbms_utility.compile_schema(
         schema         => sys_context('userenv', 'authenticated_identity'),
         compile_all    => true,
         reuse_settings => false
      );
   end if;
end;
]]>
		</sql>
		<confirmation>
			<title>Confirmation</title>
			<prompt>Compilation with PL/Scope completed.</prompt>
		</confirmation>
	</item>

	<!-- Copy of the previous item. Changed type only. A menu cannot be assigned to multiple nodes. -->
	<item connType="Oracle" type="plscope-utils-root_FOLDER" reload="true" minversion="11.1">
		<title>Compile with PL/Scope...</title>
		<prompt type="radio">
			<label>Identifiers</label>
			<value><![CDATA[STATIC:ALL:NONE:PUBLIC:SQL:PLSQL]]></value>
		</prompt>
		<prompt type="radio">
			<label>Statements</label>
			<value><![CDATA[STATIC:ALL:NONE]]></value>
		</prompt>
		<prompt>
			<label>Compile Code?</label>
			<value><![CDATA[STATIC:Yes:No]]>
			</value>
		</prompt>
		<prompt>
			<label>Compile Synonyms?</label>
			<value><![CDATA[STATIC:Yes:No]]>
			</value>
		</prompt>
		<sql>
			<![CDATA[
declare
   e_is_not_udt     exception;
   e_has_table_deps exception;
   e_no_privs       exception;
   pragma exception_init(e_is_not_udt, -22307);
   pragma exception_init(e_has_table_deps, -2311);
   pragma exception_init(e_no_privs, -1031);
begin
   if dbms_db_version.version <= 11 or
      dbms_db_version.version = 12 and dbms_db_version.release = 1
   then
      /* PL/Scope identifiers since 11.1 */
      execute immediate q'[ALTER SESSION SET plscope_settings='IDENTIFIERS:#0#']';
   else
      /* PL/Scope statements since 12.2 */
      execute immediate q'[ALTER SESSION SET plscope_settings='IDENTIFIERS:#0#, STATEMENTS:#1#']';
   end if;
   if not (dbms_db_version.version = 11 and dbms_db_version.version = 1) and '#3#' = 'Yes' then
      /* Compilation of synonyms have been introduced with EBR in 11.2 */
      <<synonyms>>
      for r in (
         select synonym_name
           from all_synonyms
          where owner = sys_context('userenv', 'authenticated_identity')
      )
      loop
         execute immediate 'ALTER SYNONYM "'
            || r.synonym_name
            || '" COMPILE';
      end loop synonyms;
      <<public_synonyms>>
      for r in (
         select synonym_name
           from sys.all_synonyms
          where owner = 'PUBLIC'
            and table_owner = sys_context('userenv', 'authenticated_identity')
      )
      loop
         <<compile_public_synonym>>
         begin
            execute immediate 'ALTER PUBLIC SYNONYM "'
               || r.synonym_name
               || '" COMPILE';
         exception
            when e_no_privs then
               /* ignore when user does not have create public synonym and drop public synonym privileges */
               null;
         end compile_public_synonym;
      end loop public_synonyms;
   end if;
   if '#2#' = 'Yes' then
      /* Compile types */
      <<types>>
      for r in (
         select o.object_type, o.object_name, count(d.name) as priority
           from sys.all_objects o
           left join all_dependencies d
             on d.owner = o.owner
            and d.type = o.object_type
            and d.name = o.object_name
          where o.owner = sys_context('userenv', 'authenticated_identity')
            and o.object_type in ('TYPE', 'TYPE BODY')
          group by o.object_type, o.object_name
          order by priority
      )
      loop
         <<compile_type>>
         begin
            if r.object_type = 'TYPE' then
               execute immediate 'ALTER TYPE "'
                  || r.object_name
                  || '" COMPILE';
            else
               execute immediate 'ALTER TYPE "'
                  || r.object_name
                  || '" COMPILE BODY';
            end if;
         exception
            when e_is_not_udt then
               /* ignore errors for non user-defined types */
               null;
            when e_has_table_deps then
               /* ignore when type is used in tables */
               null;
         end compile_type;
      end loop types;
      /* Compile schema handles procedures, functions, packages, views and triggers only */
      dbms_utility.compile_schema(
         schema         => sys_context('userenv', 'authenticated_identity'),
         compile_all    => true,
         reuse_settings => false
      );
   end if;
end;
]]>
		</sql>
		<confirmation>
			<title>Confirmation</title>
			<prompt>Compilation with PL/Scope completed.</prompt>
		</confirmation>
	</item>

</items>
